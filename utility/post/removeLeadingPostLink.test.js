import removeLeadingPostLink from './removeLeadingPostLink.js'

import expectToEqual from '../expectToEqual.js'

function postLinkTest(postLink) {
	return postLink.meta.postId === 123
}

function expectToNotRemoveLeadingPostLink(content) {
	expectToEqual(
		removeLeadingPostLink({ content }, postLinkTest),
		{ content }
	)
}

describe('removeLeadingPostLink', () => {
	it('shouldn\'t remove leading post link when there\'s none', () => {
		expectToNotRemoveLeadingPostLink(undefined)
		expectToNotRemoveLeadingPostLink([
			'Text'
		])
		expectToNotRemoveLeadingPostLink([
			[
				'Text'
			]
		])
	})

	it('shouldn\'t remove leading post link when it\'s not the first part in paragraph', () => {
		expectToNotRemoveLeadingPostLink([
			[
				'Text',
				{
					type: 'post-link',
					meta: {
						postId: 123
					}
				}
			]
		])
	})

	it('shouldn\'t remove leading post link when it\'s not the first paragraph', () => {
		expectToNotRemoveLeadingPostLink([
			[
				'Text'
			],
			[
				{
					type: 'post-link',
					meta: {
						postId: 123
					}
				}
			]
		])
	})

	it('shouldn\'t remove leading post link when it\'s not standalone', () => {
		expectToNotRemoveLeadingPostLink([
			[
				{
					type: 'post-link',
					meta: {
						postId: 123
					}
				},
				'Text'
			]
		])
	})

	it('should remove leading post link', () => {
		expectToEqual(
			removeLeadingPostLink(
				{
					content: [
						[
							{
								type: 'post-link',
								meta: {
									postId: 123
								}
							},
							'\n',
							'Text'
						]
					]
				},
				postLinkTest
			),
			{
				content: [
					[
						'Text'
					]
				]
			}
		)
	})

	it('should remove post links with autogenerated quotes', () => {
		expectToEqual(
			removeLeadingPostLink(
				{
					content: [
						[
							{
								type: 'post-link',
								content: [{
									type: 'quote',
									content: 'Abc',
									contentGenerated: true
								}],
								meta: {
									postId: 123
								}
							},
							'\n',
							'Text'
						]
					]
				},
				postLinkTest
			),
			{
				content: [
					[
						'Text'
					]
				]
			}
		)
	})

	it('should leave non-autogenerated quote', () => {
		expectToEqual(
			removeLeadingPostLink(
				{
					content: [
						[
							{
								type: 'post-link',
								content: [{
									type: 'quote',
									content: 'Abc'
								}],
								meta: {
									postId: 123
								}
							},
							'\n',
							'Text'
						]
					]
				},
				postLinkTest
			),
			{
				content: [
					[
						{
							type: 'post-link',
							content: [{
								type: 'quote',
								content: 'Abc'
							}],
							meta: {
								postId: 123
							}
						},
						'\n',
						'Text'
					]
				]
			}
		)
	})

	it('should leave non-autogenerated quotes', () => {
		expectToEqual(
			removeLeadingPostLink(
				{
					content: [
						[
							{
								type: 'post-link',
								content: [
									{
										type: 'quote',
										content: 'Abc'
									},
									{
										type: 'quote',
										content: 'Def'
									}
								],
								meta: {
									postId: 123
								}
							},
							'\n',
							'Text'
						]
					]
				},
				postLinkTest
			),
			{
				content: [
					[
						{
							type: 'post-link',
							content: [
								{
									type: 'quote',
									content: 'Abc'
								},
								{
									type: 'quote',
									content: 'Def'
								}
							],
							meta: {
								postId: 123
							}
						},
						'\n',
						'Text'
					]
				]
			}
		)
	})
})